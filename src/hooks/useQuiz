import { useState, useEffect, useCallback } from "react";

export default function useQuiz(allQuestions, difficulty = "medium") {
  const [questions, setQuestions] = useState([]);
  const [current, setCurrent] = useState(0);
  const [score, setScore] = useState(0);
  const [selected, setSelected] = useState(null);
  const [finished, setFinished] = useState(false);
  const [timeLeft, setTimeLeft] = useState(0);

  const maxTime = difficulty === "easy" ? 15 : difficulty === "hard" ? 5 : 10;

  const startQuiz = useCallback(() => {
    const shuffled = [...allQuestions].sort(() => 0.5 - Math.random());
    setQuestions(shuffled.slice(0, 10));
    setCurrent(0);
    setScore(0);
    setSelected(null);
    setFinished(false);
    setTimeLeft(maxTime);
  }, [allQuestions, maxTime]);

  const answerQuestion = useCallback(
    (option) => {
      if (selected) return; // evitar doble click
      setSelected(option);
      if (option === questions[current]?.answer) {
        setScore((prev) => prev + 1);
      }

      setTimeout(() => {
        if (current + 1 < questions.length) {
          setCurrent((prev) => prev + 1);
          setTimeLeft(maxTime);
          setSelected(null);
        } else {
          setFinished(true);
        }
      }, 700);
    },
    [current, maxTime, questions, selected]
  );

  // Timer
  useEffect(() => {
    if (finished || questions.length === 0) return;
    if (timeLeft === 0) {
      answerQuestion(""); // responde vacío si se acaba el tiempo
      return;
    }
    const timer = setInterval(() => setTimeLeft((t) => t - 1), 1000);
    return () => clearInterval(timer);
  }, [timeLeft, finished, questions, answerQuestion]);

  // Cambiar dificultad reinicia el quiz automáticamente
  useEffect(() => {
    setTimeLeft(maxTime);
  }, [difficulty, maxTime]);

  const restartQuiz = () => startQuiz();

  return {
    questions,
    current,
    score,
    selected,
    finished,
    timeLeft,
    maxTime,
    startQuiz,
    answerQuestion,
    restartQuiz,
  };
}
